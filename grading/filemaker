#!/usr/bin/env python
# create a file called "grades.txt" which sets one up for quick
# grading and comment uploading. the format of grades.txt is:
#      grade/20  --utcsname----- Comments
# and can be uploaded to UTCS Webturnin using uploader.py
# Seth Hoenig 2012 (seth.a.hoenig@gmail.com)

import os
import shutil
import sys
import re
from gutilz import format_record

keeplist = ['Guess.py']
pushlist = []


# Walk into directories in filesystem
# Ripped from os module and slightly modified
# for alphabetical sorting
def sortedWalk(top, topdown=True, onerror=None):
    from os.path import join, isdir

    names = os.listdir(top)
    names.sort()
    dirs, nondirs = [], []

    for name in names:
        if isdir(os.path.join(top, name)):
            dirs.append(name)
        else:
            nondirs.append(name)

    if topdown:
        yield top, dirs, nondirs
    for name in dirs:
        path = join(top, name)
        if not os.path.islink(path):
            for x in sortedWalk(path, topdown, onerror):
                yield x
    if not topdown:
        yield top, dirs, nondirs


# delete everything except files listed in keeplist, so it's easier to
# see what we care about in the directory. keep in mind, files turned in
# with the wrong name will be deleted (just locally, of course)
def purge():
    for d, _, files in os.walk('./'):
        odir = d
        for f in files:
            if not f in keeplist:
                if(odir is not './'):
                    os.remove(odir + '/' + f)

# create a copy of each file in pushlist in each students directory
# for example, a common test case file, or data file
def push():
    if len(pushlist) > 0:
        cdir = './'
        for _, dirs, _ in os.walk(cdir):
            for dname in dirs:
                for item in pushlist:
                    target = cdir + dname + '/' + item
                    shutil.copy2('./' + item, target)

def pluckids(d, fname):
    ids = []
    with open(d+'/'+fname) as pyfile:
        for line in pyfile.readlines():
            line = line.strip()
            if 'EID' in line:

                eid_pattern = re.compile('[.\W]*[eE][iI][dD]S?:?[\s]*([a-zA-Z]+[a-zA-Z0-9]*)[,\s]*([a-zA-Z]+[a-zA-Z0-9])?[.\W]*')
                m = re.match(eid_pattern, line)
                if not m:
                    continue
                else:
                    if m.group(1):
                        ids.append(m.group(1).lower())
                    if m.group(2):
                        ids.append(m.group(2).lower())
    return ids


def format_ids(eids):
    if not eids:
        return 'MISSING-EID'
    elif len(eids) == 1:
        return eids[0]
    elif len(eids) == 2:
        return eids[0] + ',' + eids[1] # no spaces
    else:
        return 'ERROR'

# actually write things to the file
def writeit(d, files, fgrades):
    missing = []
    eid = 'NO-FILE'
    for item in keeplist:
        if item not in files:
            missing.append(item)
        elif item.endswith('.py'):
            eid = pluckids(d, item)
            eid = format_ids(eid)
    formatted = format_record(str(d)[2:], eid, missing)
    print >>fgrades, formatted


# grab all the user names from the folders, and put them in a text file
# with other info. if the user does not have one or more of the files
# in the keeplist, give them a grade of 0 (this will show up in the
# grade/comment file)
def setup_grade_file(splitDirectory, grader, wantedList=None):
    with open('./grades.txt', 'w') as fgrades:
        for d, _, files in sortedWalk('./'):
            if d is not './':
                if splitDirectory:
                    if grader in ('seth',):
                        if (ord(d[2]) >= ord('a') and ord(d[2]) <= ord('j')) \
                                or (ord(d[2]) >= ord('A') and ord(d[2]) <= ord('J')):
                            writeit(d, files, fgrades)
                    else: # probably Tyler
                        if (ord(d[2]) >= ord('k') and ord(d[2]) <= ord('z')) \
                                or (ord(d[2]) >= ord('K') and ord(d[2]) <= ord('Z')):
                            writeit(d, files, fgrades)
                else:
                    writeit(d, files, fgrades)
                

# program begins here
if __name__ == '__main__':
    if len(sys.argv) != 3:
        print 'usage: filemaker <classno> <gradername>'
        sys.exit(1)
    purge()
    push()
    if sys.argv[1] not in ('52745', '52750', '52755'):
        print 'invalid class number: %s', sys.argv[1]
        sys.exit(1)
    if sys.argv[2] not in ('seth', 'tyler'):
        print 'invalid name: %s', sys.argv[2]
        sys.exit(1)
    split = True if sys.argv[1] in ('52750',) else False
    setup_grade_file(split, sys.argv[2])


# usage example (sitting in directory 52750)
#  filemaker 52750 seth
